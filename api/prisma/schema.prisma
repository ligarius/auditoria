generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String    @id @default(cuid())
  name      String
  taxId     String?
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id           String             @id @default(cuid())
  companyId    String
  company      Company            @relation(fields: [companyId], references: [id])
  name         String
  status       String
  ownerId      String
  owner        User               @relation("ProjectOwner", fields: [ownerId], references: [id])
  settings     Json?
  startDate    DateTime?
  endDate      DateTime?
  memberships  Membership[]
  files        File[]
  dataItems    DataRequestItem[]
  surveys      Survey[]
  interviews   Interview[]
  processes    ProcessAsset[]
  systems      SystemInventory[]
  coverages    ProcessCoverage[]
  integrations Integration[]
  dataModels   DataModelQuality[]
  security     SecurityPosture[]
  performance  Performance[]
  costs        CostLicensing[]
  receptions   Reception[]
  risks        Risk[]
  findings     Finding[]
  pocs         POCItem[]
  decisions    DecisionLog[]
  kpis         KPI[]
  auditLogs    AuditLog[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  passwordHash  String?
  role          String
  memberships   Membership[]
  uploadedFiles File[]       @relation("UserFiles")
  auditLogs     AuditLog[]
  ownedProjects Project[]    @relation("ProjectOwner")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Membership {
  userId    String
  projectId String
  role      String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model File {
  id               String            @id @default(cuid())
  projectId        String
  path             String
  filename         String
  mime             String
  size             Int
  uploadedBy       String
  createdAt        DateTime          @default(now())
  project          Project           @relation(fields: [projectId], references: [id])
  uploader         User              @relation("UserFiles", fields: [uploadedBy], references: [id])
  /// LADOS OPUESTOS (NUEVOS) — ¡IMPORTANTE nombrar las relaciones!
  dataRequestItems DataRequestItem[] @relation(name: "FileToDataRequestItems")
  interviewsAudio  Interview[]       @relation(name: "FileToInterviewAudio")
  processAssets    ProcessAsset[]    @relation(name: "FileToProcessAssets")
}

model DataRequestItem {
  id          String    @id @default(cuid())
  projectId   String
  category    String
  title       String
  description String?
  required    Boolean   @default(true)
  status      String    @default("Pending")
  format      String?
  ownerName   String?
  dueDate     DateTime?
  notes       String?
  fileId      String?
  project     Project   @relation(fields: [projectId], references: [id])
  /// DUEÑO DE LA FK + NOMBRE DE RELACIÓN
  file        File?     @relation(name: "FileToDataRequestItems", fields: [fileId], references: [id])
}

model Survey {
  id          String           @id @default(cuid())
  projectId   String
  title       String
  description String?
  isActive    Boolean          @default(true)
  project     Project          @relation(fields: [projectId], references: [id])
  questions   SurveyQuestion[]
  responses   SurveyResponse[]
}

model SurveyQuestion {
  id       String         @id @default(cuid())
  surveyId String
  type     String
  text     String
  scaleMin Int?
  scaleMax Int?
  required Boolean        @default(true)
  survey   Survey         @relation(fields: [surveyId], references: [id])
  answers  SurveyAnswer[]
}

model SurveyResponse {
  id         String         @id @default(cuid())
  surveyId   String
  respondent String?
  createdAt  DateTime       @default(now())
  survey     Survey         @relation(fields: [surveyId], references: [id])
  answers    SurveyAnswer[]
}

model SurveyAnswer {
  id          String         @id @default(cuid())
  responseId  String
  questionId  String
  valueNumber Float?
  valueText   String?
  response    SurveyResponse @relation(fields: [responseId], references: [id])
  question    SurveyQuestion @relation(fields: [questionId], references: [id])
}

model Interview {
  id          String    @id @default(cuid())
  projectId   String
  personName  String
  role        String?
  area        String?
  date        DateTime?
  transcript  String?
  audioFileId String?
  notes       String?
  project     Project   @relation(fields: [projectId], references: [id])
  /// DUEÑO DE LA FK + NOMBRE DE RELACIÓN
  audioFile   File?     @relation(name: "FileToInterviewAudio", fields: [audioFileId], references: [id])
}

model ProcessAsset {
  id        String  @id @default(cuid())
  projectId String
  type      String
  title     String
  fileId    String?
  url       String?
  project   Project @relation(fields: [projectId], references: [id])
  /// DUEÑO DE LA FK + NOMBRE DE RELACIÓN
  file      File?   @relation(name: "FileToProcessAssets", fields: [fileId], references: [id])
}

model SystemInventory {
  id            String    @id @default(cuid())
  projectId     String
  systemName    String
  type          String
  ownerArea     String?
  usersActive   Int?
  criticality   String?
  objective     String?
  modulesUsed   String?
  hosting       String?
  vendor        String?
  version       String?
  supportActive Boolean?
  goLive        DateTime?
  lastUpdate    DateTime?
  notes         String?
  project       Project   @relation(fields: [projectId], references: [id])
}

model ProcessCoverage {
  id            String  @id @default(cuid())
  projectId     String
  process       String
  subProcess    String?
  systemNameRef String?
  coverage      Int
  evidence      String?
  hasGap        Boolean
  gapDesc       String?
  impact        String?
  frequency     String?
  owner         String?
  project       Project @relation(fields: [projectId], references: [id])
}

model Integration {
  id          String  @id @default(cuid())
  projectId   String
  source      String
  target      String
  type        String
  periodicity String?
  dailyVolume Int?
  format      String?
  auth        String?
  stability   Int?
  errors30d   Int?
  sla         String?
  notes       String?
  project     Project @relation(fields: [projectId], references: [id])
}

model DataModelQuality {
  id                   String  @id @default(cuid())
  projectId            String
  systemName           String
  entity               String
  hasCriticalFields    Boolean
  dataQuality          Int
  hasBusinessRules     Boolean
  historyYears         Int?
  traceability         Boolean
  reports              String?
  inventoryAccuracyPct Float?
  notes                String?
  project              Project @relation(fields: [projectId], references: [id])
}

model SecurityPosture {
  id               String   @id @default(cuid())
  projectId        String
  systemName       String
  userLifecycle    String?
  rbac             String?
  mfa              Boolean?
  auditLogs        Boolean?
  backupsRPO       String?
  backupsRTO       String?
  tlsInTransit     Boolean?
  encryptionAtRest Boolean?
  openVulns        String?
  compliance       String?
  notes            String?
  project          Project  @relation(fields: [projectId], references: [id])
}

model Performance {
  id              String  @id @default(cuid())
  projectId       String
  systemName      String
  peakUsers       Int?
  latencyMs       Int?
  availabilityPct Float?
  incidents90d    Int?
  topRootCause    String?
  capacityInfo    String?
  scalability     Int?
  notes           String?
  project         Project @relation(fields: [projectId], references: [id])
}

model CostLicensing {
  id            String  @id @default(cuid())
  projectId     String
  systemName    String
  model         String
  usersLicenses Int?
  costAnnual    Float?
  implUSD       Float?
  infraUSD      Float?
  supportUSD    Float?
  otherUSD      Float?
  project       Project @relation(fields: [projectId], references: [id])
}

model Risk {
  id          String    @id @default(cuid())
  projectId   String
  category    String
  description String
  probability Int
  impact      Int
  severity    Int
  rag         String
  mitigation  String?
  owner       String?
  dueDate     DateTime?
  project     Project   @relation(fields: [projectId], references: [id])
}

model Finding {
  id             String    @id @default(cuid())
  projectId      String
  title          String
  evidence       String?
  impact         String
  recommendation String
  quickWin       Boolean   @default(false)
  effortDays     Int?
  responsibleR   String?
  accountableA   String?
  targetDate     DateTime?
  status         String    @default("Open")
  project        Project   @relation(fields: [projectId], references: [id])
}

model POCItem {
  id          String    @id @default(cuid())
  projectId   String
  item        String
  description String?
  owner       String?
  date        DateTime?
  status      String    @default("Pending")
  project     Project   @relation(fields: [projectId], references: [id])
}

model DecisionLog {
  id        String   @id @default(cuid())
  projectId String
  date      DateTime
  topic     String
  decision  String
  rationale String
  approverA String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Reception {
  id                 String    @id @default(cuid())
  projectId          String
  date               DateTime
  truckPlate         String?
  carrier            String?
  driverName         String?
  dock               String?
  tArriveGate        DateTime?
  tArriveDock        DateTime?
  tUnloadStart       DateTime?
  tUnloadEnd         DateTime?
  tExit              DateTime?
  eppOk              Boolean?
  docsOk             Boolean?
  sealNumberDeclared String?
  sealNumberObserved String?
  tempAtOpen         Float?
  issues             String?
  inventoryMatchPct  Float?
  actions            String?
  project            Project   @relation(fields: [projectId], references: [id])
}

model KPI {
  id        String   @id @default(cuid())
  projectId String
  name      String
  value     Float
  unit      String?
  date      DateTime
  project   Project  @relation(fields: [projectId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  action    String
  oldValue  Json?
  newValue  Json?
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
}
