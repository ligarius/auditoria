generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String                  @id @default(cuid())
  name                  String
  taxId                 String?
  projects              Project[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  QuestionnaireTemplate QuestionnaireTemplate[]
  Respondent            Respondent[]
}

enum ProjectWorkflowState {
  planificacion
  recoleccion_datos
  analisis
  recomendaciones
  cierre
}

model Project {
  id                     String                  @id @default(cuid())
  companyId              String
  company                Company                 @relation(fields: [companyId], references: [id])
  name                   String
  status                 ProjectWorkflowState    @default(planificacion)
  ownerId                String?
  owner                  User?                   @relation("ProjectOwner", fields: [ownerId], references: [id])
  settings               Json?
  startDate              DateTime?
  endDate                DateTime?
  workflowDefinition     Json?
  memberships            Membership[]
  files                  File[]
  dataItems              DataRequestItem[]
  tasks                  ProjectTask[]
  processes              ProcessAsset[]
  systems                SystemInventory[]
  coverages              ProcessCoverage[]
  integrations           Integration[]
  dataModels             DataModelQuality[]
  security               SecurityPosture[]
  performance            Performance[]
  costs                  CostLicensing[]
  receptions             Reception[]
  risks                  Risk[]
  findings               Finding[]
  pocs                   POCItem[]
  decisions              Decision[]
  committees             Committee[]
  meetings               Meeting[]
  scopeChanges           ScopeChange[]
  approvalWorkflows      ApprovalWorkflow[]
  kpiSnapshots           KpiSnapshot[]
  kpis                   KPI[]
  auditLogs              AuditLog[]
  questionnaireResponses QuestionnaireResponse[]
  surveyLinks            SurveyLink[]
  surveys                Survey[]
  interviews             Interview[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@unique([companyId, name], name: "Project_companyId_name_key")
  @@index([companyId])
}

model User {
  id                    String                  @id @default(cuid())
  name                  String
  email                 String                  @unique
  passwordHash          String?
  role                  String
  memberships           Membership[]
  uploadedFiles         File[]                  @relation("UserFiles")
  auditLogs             AuditLog[]
  ownedProjects         Project[]               @relation("ProjectOwner")
  committeesOwned       Committee[]             @relation("CommitteeOwner")
  minutesAuthored       Minute[]                @relation("MinuteAuthor")
  approvalSteps         ApprovalStep[]          @relation("ApprovalStepApprover")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  QuestionnaireTemplate QuestionnaireTemplate[]
  SurveyLink            SurveyLink[]
  Interview             Interview[]
}

model Membership {
  userId    String
  projectId String
  role      String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model File {
  id               String            @id @default(cuid())
  projectId        String
  path             String
  filename         String
  mime             String
  size             Int
  uploadedBy       String
  createdAt        DateTime          @default(now())
  project          Project           @relation(fields: [projectId], references: [id])
  uploader         User              @relation("UserFiles", fields: [uploadedBy], references: [id])
  /// LADOS OPUESTOS (NUEVOS) — ¡IMPORTANTE nombrar las relaciones!
  dataRequestItems DataRequestItem[] @relation(name: "FileToDataRequestItems")
  processAssets    ProcessAsset[]    @relation(name: "FileToProcessAssets")
  interviewAudio   Interview[]       @relation(name: "FileToInterviewAudio")
}

model DataRequestItem {
  id          String    @id @default(cuid())
  projectId   String
  category    String
  title       String
  description String?
  required    Boolean   @default(true)
  status      String    @default("Pending")
  format      String?
  ownerName   String?
  dueDate     DateTime?
  notes       String?
  fileId      String?
  project     Project   @relation(fields: [projectId], references: [id])
  /// DUEÑO DE LA FK + NOMBRE DE RELACIÓN
  file        File?     @relation(name: "FileToDataRequestItems", fields: [fileId], references: [id])
}

model DataRequestCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuestionnaireTemplate {
  id          String                 @id @default(cuid())
  companyId   String
  company     Company                @relation(fields: [companyId], references: [id])
  name        String
  type        String
  createdById String
  createdBy   User                   @relation(fields: [createdById], references: [id])
  isArchived  Boolean                @default(false)
  versions    QuestionnaireVersion[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@index([companyId])
}

model QuestionnaireVersion {
  id            String                  @id @default(cuid())
  templateId    String
  template      QuestionnaireTemplate   @relation(fields: [templateId], references: [id])
  version       Int
  formJson      Json
  scoringJson   Json?
  skipLogicJson Json?
  status        String
  publishedAt   DateTime?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  links         SurveyLink[]
  responses     QuestionnaireResponse[]
  interviews    Interview[]

  @@unique([templateId, version])
}

model SurveyLink {
  id           String                  @id @default(cuid())
  versionId    String
  projectId    String
  targetType   String
  token        String                  @unique
  expiresAt    DateTime?
  maxResponses Int?
  usedCount    Int                     @default(0)
  createdById  String
  createdBy    User                    @relation(fields: [createdById], references: [id])
  createdAt    DateTime                @default(now())
  version      QuestionnaireVersion    @relation(fields: [versionId], references: [id])
  project      Project                 @relation(fields: [projectId], references: [id])
  responses    QuestionnaireResponse[]

  @@index([projectId])
}

model Survey {
  id          String           @id @default(cuid())
  projectId   String
  title       String
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  project     Project          @relation(fields: [projectId], references: [id])
  questions   SurveyQuestion[]
  responses   SurveyResponse[]

  @@index([projectId])
}

model SurveyQuestion {
  id        String         @id @default(cuid())
  surveyId  String
  type      String
  text      String
  scaleMin  Int?
  scaleMax  Int?
  required  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  survey    Survey         @relation(fields: [surveyId], references: [id])
  answers   SurveyAnswer[]

  @@index([surveyId])
}

model SurveyResponse {
  id          String         @id @default(cuid())
  surveyId    String
  submittedAt DateTime       @default(now())
  createdAt   DateTime       @default(now())
  survey      Survey         @relation(fields: [surveyId], references: [id])
  answers     SurveyAnswer[]

  @@index([surveyId])
}

model SurveyAnswer {
  id         String         @id @default(cuid())
  responseId String
  questionId String
  value      Json
  createdAt  DateTime       @default(now())
  response   SurveyResponse @relation(fields: [responseId], references: [id])
  question   SurveyQuestion @relation(fields: [questionId], references: [id])

  @@index([responseId])
  @@index([questionId])
}

model Respondent {
  id         String                  @id @default(cuid())
  companyId  String
  company    Company                 @relation(fields: [companyId], references: [id])
  email      String?
  fullName   String?
  department String?
  externalId String?
  createdAt  DateTime                @default(now())
  responses  QuestionnaireResponse[]
  Interview  Interview[]

  @@index([companyId])
  @@index([email])
  @@index([externalId])
}

model Interview {
  id            String                @id @default(cuid())
  projectId     String
  personName    String
  role          String?
  area          String?
  date          DateTime?
  transcript    String?
  notes         String?
  audioFileId   String?
  versionId     String?
  interviewerId String
  respondentId  String?
  status        String?               @default("draft")
  startedAt     DateTime?
  finishedAt    DateTime?
  audioKey      String?
  createdAt     DateTime              @default(now())
  version       QuestionnaireVersion? @relation(fields: [versionId], references: [id])
  project       Project               @relation(fields: [projectId], references: [id])
  interviewer   User                  @relation(fields: [interviewerId], references: [id])
  respondent    Respondent?           @relation(fields: [respondentId], references: [id])
  audioFile     File?                 @relation(name: "FileToInterviewAudio", fields: [audioFileId], references: [id])

  @@index([projectId])
  @@index([versionId])
}

model QuestionnaireResponse {
  id              String               @id @default(cuid())
  versionId       String
  projectId       String
  respondentId    String?
  surveyLinkId    String?
  answersJson     Json
  scoreTotal      Float?
  scoreDetailJson Json?
  submittedAt     DateTime             @default(now())
  createdAt       DateTime             @default(now())
  version         QuestionnaireVersion @relation(fields: [versionId], references: [id])
  project         Project              @relation(fields: [projectId], references: [id])
  respondent      Respondent?          @relation(fields: [respondentId], references: [id])
  surveyLink      SurveyLink?          @relation(fields: [surveyLinkId], references: [id])

  @@index([projectId])
  @@index([versionId])
  @@index([respondentId])
}

model ProcessAsset {
  id        String  @id @default(cuid())
  projectId String
  type      String
  title     String
  fileId    String?
  url       String?
  project   Project @relation(fields: [projectId], references: [id])
  /// DUEÑO DE LA FK + NOMBRE DE RELACIÓN
  file      File?   @relation(name: "FileToProcessAssets", fields: [fileId], references: [id])
}

model SystemInventory {
  id            String    @id @default(cuid())
  projectId     String
  systemName    String
  type          String
  ownerArea     String?
  usersActive   Int?
  criticality   String?
  objective     String?
  modulesUsed   String?
  hosting       String?
  vendor        String?
  version       String?
  supportActive Boolean?
  goLive        DateTime?
  lastUpdate    DateTime?
  notes         String?
  project       Project   @relation(fields: [projectId], references: [id])
}

model ProcessCoverage {
  id            String  @id @default(cuid())
  projectId     String
  process       String
  subProcess    String?
  systemNameRef String?
  coverage      Int
  evidence      String?
  hasGap        Boolean
  gapDesc       String?
  impact        String?
  frequency     String?
  owner         String?
  project       Project @relation(fields: [projectId], references: [id])
}

model Integration {
  id          String  @id @default(cuid())
  projectId   String
  source      String
  target      String
  type        String
  periodicity String?
  dailyVolume Int?
  format      String?
  auth        String?
  stability   Int?
  errors30d   Int?
  sla         String?
  notes       String?
  project     Project @relation(fields: [projectId], references: [id])
}

model DataModelQuality {
  id                   String  @id @default(cuid())
  projectId            String
  systemName           String
  entity               String
  hasCriticalFields    Boolean
  dataQuality          Int
  hasBusinessRules     Boolean
  historyYears         Int?
  traceability         Boolean
  reports              String?
  inventoryAccuracyPct Float?
  notes                String?
  project              Project @relation(fields: [projectId], references: [id])
}

model SecurityPosture {
  id               String   @id @default(cuid())
  projectId        String
  systemName       String
  userLifecycle    String?
  rbac             String?
  mfa              Boolean?
  auditLogs        Boolean?
  backupsRPO       String?
  backupsRTO       String?
  tlsInTransit     Boolean?
  encryptionAtRest Boolean?
  openVulns        String?
  compliance       String?
  notes            String?
  project          Project  @relation(fields: [projectId], references: [id])
}

model Performance {
  id              String  @id @default(cuid())
  projectId       String
  systemName      String
  peakUsers       Int?
  latencyMs       Int?
  availabilityPct Float?
  incidents90d    Int?
  topRootCause    String?
  capacityInfo    String?
  scalability     Int?
  notes           String?
  project         Project @relation(fields: [projectId], references: [id])
}

model CostLicensing {
  id            String  @id @default(cuid())
  projectId     String
  systemName    String
  model         String
  usersLicenses Int?
  costAnnual    Float?
  implUSD       Float?
  infraUSD      Float?
  supportUSD    Float?
  otherUSD      Float?
  project       Project @relation(fields: [projectId], references: [id])
}

model ProjectTask {
  id          String        @id @default(cuid())
  projectId   String
  parentId    String?
  name        String
  description String?
  owner       String?
  status      String        @default("Planificado")
  progress    Int?
  startDate   DateTime
  endDate     DateTime
  sortOrder   Int?
  project     Project       @relation(fields: [projectId], references: [id])
  parent      ProjectTask?  @relation("ProjectTaskChildren", fields: [parentId], references: [id])
  children    ProjectTask[] @relation("ProjectTaskChildren")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([projectId])
  @@index([parentId])
}

model Risk {
  id          String    @id @default(cuid())
  projectId   String
  category    String
  description String
  probability Int
  impact      Int
  severity    Int
  rag         String
  mitigation  String?
  owner       String?
  dueDate     DateTime?
  meetingId   String?
  project     Project   @relation(fields: [projectId], references: [id])
  meeting     Meeting?  @relation(fields: [meetingId], references: [id])

  @@index([meetingId])
}

model Finding {
  id             String    @id @default(cuid())
  projectId      String
  title          String
  evidence       String?
  impact         String
  recommendation String
  quickWin       Boolean   @default(false)
  effortDays     Int?
  responsibleR   String?
  accountableA   String?
  targetDate     DateTime?
  status         String    @default("Open")
  project        Project   @relation(fields: [projectId], references: [id])
}

model POCItem {
  id          String    @id @default(cuid())
  projectId   String
  item        String
  description String?
  owner       String?
  date        DateTime?
  status      String    @default("Pending")
  project     Project   @relation(fields: [projectId], references: [id])
}

model Decision {
  id          String     @id @default(cuid())
  projectId   String
  committeeId String?
  meetingId   String?
  date        DateTime
  topic       String
  decision    String
  rationale   String
  approverA   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     Project    @relation(fields: [projectId], references: [id])
  committee   Committee? @relation(fields: [committeeId], references: [id])
  meeting     Meeting?   @relation(fields: [meetingId], references: [id])

  @@index([projectId])
  @@index([committeeId])
  @@index([meetingId])
}

model Committee {
  id          String     @id @default(cuid())
  projectId   String
  name        String
  description String?
  ownerId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     Project    @relation(fields: [projectId], references: [id])
  owner       User?      @relation("CommitteeOwner", fields: [ownerId], references: [id])
  meetings    Meeting[]
  decisions   Decision[]

  @@index([projectId])
}

model Meeting {
  id           String        @id @default(cuid())
  projectId    String
  committeeId  String?
  title        String
  agenda       String?
  scheduledAt  DateTime
  location     String?
  status       String        @default("scheduled")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  project      Project       @relation(fields: [projectId], references: [id])
  committee    Committee?    @relation(fields: [committeeId], references: [id])
  minutes      Minute[]
  decisions    Decision[]
  risks        Risk[]
  scopeChanges ScopeChange[]

  @@index([projectId])
  @@index([committeeId])
}

model Minute {
  id        String   @id @default(cuid())
  meetingId String
  authorId  String?
  content   String
  createdAt DateTime @default(now())
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  author    User?    @relation("MinuteAuthor", fields: [authorId], references: [id])

  @@index([meetingId])
}

model ScopeChange {
  id                 String            @id @default(cuid())
  projectId          String
  meetingId          String?
  title              String
  description        String?
  impact             String?
  status             String            @default("proposed")
  requestedBy        String?
  requestedAt        DateTime          @default(now())
  decidedAt          DateTime?
  decision           String?
  approvalWorkflowId String?           @unique
  project            Project           @relation(fields: [projectId], references: [id])
  meeting            Meeting?          @relation(fields: [meetingId], references: [id])
  approvalWorkflow   ApprovalWorkflow? @relation("ScopeChangeApproval", fields: [approvalWorkflowId], references: [id])

  @@index([projectId])
  @@index([meetingId])
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

model ApprovalWorkflow {
  id           String         @id @default(cuid())
  projectId    String
  resourceType String
  resourceId   String
  status       ApprovalStatus @default(pending)
  dueAt        DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  project      Project        @relation(fields: [projectId], references: [id])
  steps        ApprovalStep[]
  slaTimers    SlaTimer[]
  scopeChange  ScopeChange?   @relation("ScopeChangeApproval")

  @@unique([resourceType, resourceId], map: "ApprovalWorkflow_resource_unique")
  @@index([projectId])
}

model ApprovalStep {
  id           String           @id @default(cuid())
  workflowId   String
  order        Int
  approverId   String?
  approverRole String?
  status       ApprovalStatus   @default(pending)
  decidedAt    DateTime?
  comments     String?
  workflow     ApprovalWorkflow @relation(fields: [workflowId], references: [id])
  approver     User?            @relation("ApprovalStepApprover", fields: [approverId], references: [id])

  @@index([workflowId])
  @@index([approverId])
}

model SlaTimer {
  id         String           @id @default(cuid())
  workflowId String
  startedAt  DateTime         @default(now())
  dueAt      DateTime?
  stoppedAt  DateTime?
  status     String           @default("running")
  workflow   ApprovalWorkflow @relation(fields: [workflowId], references: [id])

  @@index([workflowId])
}

model KpiSnapshot {
  id                String   @id @default(cuid())
  projectId         String
  date              DateTime
  otif              Float?
  pickPerHour       Float?
  inventoryAccuracy Float?
  occupancyPct      Float?
  costPerOrder      Float?
  kmPerDrop         Float?
  createdAt         DateTime @default(now())
  project           Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, date], map: "KpiSnapshot_projectId_date_idx")
}

model Reception {
  id                 String    @id @default(cuid())
  projectId          String
  date               DateTime
  truckPlate         String?
  carrier            String?
  driverName         String?
  dock               String?
  tArriveGate        DateTime?
  tArriveDock        DateTime?
  tUnloadStart       DateTime?
  tUnloadEnd         DateTime?
  tExit              DateTime?
  eppOk              Boolean?
  docsOk             Boolean?
  sealNumberDeclared String?
  sealNumberObserved String?
  tempAtOpen         Float?
  issues             String?
  inventoryMatchPct  Float?
  actions            String?
  project            Project   @relation(fields: [projectId], references: [id])
}

model KPI {
  id        String   @id @default(cuid())
  projectId String
  name      String
  value     Float
  unit      String?
  date      DateTime
  project   Project  @relation(fields: [projectId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  action    String
  oldValue  Json?
  newValue  Json?
  userId    String
  projectId String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
}
